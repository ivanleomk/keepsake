{"ast":null,"code":"/**\n * textFit v2.3.1\n * Previously known as jQuery.textFit\n * 11/2014 by STRML (strml.github.com)\n * MIT License\n *\n * To use: textFit(document.getElementById('target-div'), options);\n *\n * Will make the *text* content inside a container scale to fit the container\n * The container is required to have a set width and height\n * Uses binary search to fit text with minimal layout calls.\n * Version 2.0 does not use jQuery.\n */\n\n/*global define:true, document:true, window:true, HTMLElement:true*/\n(function (root, factory) {\n  \"use strict\"; // UMD shim\n\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // Node/CommonJS\n    module.exports = factory();\n  } else {\n    // Browser\n    root.textFit = factory();\n  }\n})(typeof global === \"object\" ? global : this, function () {\n  \"use strict\";\n\n  var defaultSettings = {\n    alignVert: false,\n    // if true, textFit will align vertically using css tables\n    alignHoriz: false,\n    // if true, textFit will set text-align: center\n    multiLine: false,\n    // if true, textFit will not set white-space: no-wrap\n    detectMultiLine: true,\n    // disable to turn off automatic multi-line sensing\n    minFontSize: 6,\n    maxFontSize: 80,\n    reProcess: true,\n    // if true, textFit will re-process already-fit nodes. Set to 'false' for better performance\n    widthOnly: false,\n    // if true, textFit will fit text to element width, regardless of text height\n    alignVertWithFlexbox: false // if true, textFit will use flexbox for vertical alignment\n\n  };\n  return function textFit(els, options) {\n    if (!options) options = {}; // Extend options.\n\n    var settings = {};\n\n    for (var key in defaultSettings) {\n      if (options.hasOwnProperty(key)) {\n        settings[key] = options[key];\n      } else {\n        settings[key] = defaultSettings[key];\n      }\n    } // Convert jQuery objects into arrays\n\n\n    if (typeof els.toArray === \"function\") {\n      els = els.toArray();\n    } // Support passing a single el\n\n\n    var elType = Object.prototype.toString.call(els);\n\n    if (elType !== '[object Array]' && elType !== '[object NodeList]' && elType !== '[object HTMLCollection]') {\n      els = [els];\n    } // Process each el we've passed.\n\n\n    for (var i = 0; i < els.length; i++) {\n      processItem(els[i], settings);\n    }\n  };\n  /**\n   * The meat. Given an el, make the text inside it fit its parent.\n   * @param  {DOMElement} el       Child el.\n   * @param  {Object} settings     Options for fit.\n   */\n\n  function processItem(el, settings) {\n    if (!isElement(el) || !settings.reProcess && el.getAttribute('textFitted')) {\n      return false;\n    } // Set textFitted attribute so we know this was processed.\n\n\n    if (!settings.reProcess) {\n      el.setAttribute('textFitted', 1);\n    }\n\n    var innerSpan, originalHeight, originalHTML, originalWidth;\n    var low, mid, high; // Get element data.\n\n    originalHTML = el.innerHTML;\n    originalWidth = innerWidth(el);\n    originalHeight = innerHeight(el); // Don't process if we can't find box dimensions\n\n    if (!originalWidth || !settings.widthOnly && !originalHeight) {\n      if (!settings.widthOnly) throw new Error('Set a static height and width on the target element ' + el.outerHTML + ' before using textFit!');else throw new Error('Set a static width on the target element ' + el.outerHTML + ' before using textFit!');\n    } // Add textFitted span inside this container.\n\n\n    if (originalHTML.indexOf('textFitted') === -1) {\n      innerSpan = document.createElement('span');\n      innerSpan.className = 'textFitted'; // Inline block ensure it takes on the size of its contents, even if they are enclosed\n      // in other tags like <p>\n\n      innerSpan.style['display'] = 'inline-block';\n      innerSpan.innerHTML = originalHTML;\n      el.innerHTML = '';\n      el.appendChild(innerSpan);\n    } else {\n      // Reprocessing.\n      innerSpan = el.querySelector('span.textFitted'); // Remove vertical align if we're reprocessing.\n\n      if (hasClass(innerSpan, 'textFitAlignVert')) {\n        innerSpan.className = innerSpan.className.replace('textFitAlignVert', '');\n        innerSpan.style['height'] = '';\n        el.className.replace('textFitAlignVertFlex', '');\n      }\n    } // Prepare & set alignment\n\n\n    if (settings.alignHoriz) {\n      el.style['text-align'] = 'center';\n      innerSpan.style['text-align'] = 'center';\n    } // Check if this string is multiple lines\n    // Not guaranteed to always work if you use wonky line-heights\n\n\n    var multiLine = settings.multiLine;\n\n    if (settings.detectMultiLine && !multiLine && innerSpan.scrollHeight >= parseInt(window.getComputedStyle(innerSpan)['font-size'], 10) * 2) {\n      multiLine = true;\n    } // If we're not treating this as a multiline string, don't let it wrap.\n\n\n    if (!multiLine) {\n      el.style['white-space'] = 'nowrap';\n    }\n\n    low = settings.minFontSize;\n    high = settings.maxFontSize; // Binary search for highest best fit\n\n    var size = low;\n\n    while (low <= high) {\n      mid = high + low >> 1;\n      innerSpan.style.fontSize = mid + 'px';\n\n      if (innerSpan.scrollWidth <= originalWidth && (settings.widthOnly || innerSpan.scrollHeight <= originalHeight)) {\n        size = mid;\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      } // await injection point\n\n    } // found, updating font if differs:\n\n\n    if (innerSpan.style.fontSize != size + 'px') innerSpan.style.fontSize = size + 'px'; // Our height is finalized. If we are aligning vertically, set that up.\n\n    if (settings.alignVert) {\n      addStyleSheet();\n      var height = innerSpan.scrollHeight;\n\n      if (window.getComputedStyle(el)['position'] === \"static\") {\n        el.style['position'] = 'relative';\n      }\n\n      if (!hasClass(innerSpan, \"textFitAlignVert\")) {\n        innerSpan.className = innerSpan.className + \" textFitAlignVert\";\n      }\n\n      innerSpan.style['height'] = height + \"px\";\n\n      if (settings.alignVertWithFlexbox && !hasClass(el, \"textFitAlignVertFlex\")) {\n        el.className = el.className + \" textFitAlignVertFlex\";\n      }\n    }\n  } // Calculate height without padding.\n\n\n  function innerHeight(el) {\n    var style = window.getComputedStyle(el, null);\n    return el.clientHeight - parseInt(style.getPropertyValue('padding-top'), 10) - parseInt(style.getPropertyValue('padding-bottom'), 10);\n  } // Calculate width without padding.\n\n\n  function innerWidth(el) {\n    var style = window.getComputedStyle(el, null);\n    return el.clientWidth - parseInt(style.getPropertyValue('padding-left'), 10) - parseInt(style.getPropertyValue('padding-right'), 10);\n  } //Returns true if it is a DOM element\n\n\n  function isElement(o) {\n    return typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n    o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n  }\n\n  function hasClass(element, cls) {\n    return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;\n  } // Better than a stylesheet dependency\n\n\n  function addStyleSheet() {\n    if (document.getElementById(\"textFitStyleSheet\")) return;\n    var style = [\".textFitAlignVert{\", \"position: absolute;\", \"top: 0; right: 0; bottom: 0; left: 0;\", \"margin: auto;\", \"display: flex;\", \"justify-content: center;\", \"flex-direction: column;\", \"}\", \".textFitAlignVertFlex{\", \"display: flex;\", \"}\", \".textFitAlignVertFlex .textFitAlignVert{\", \"position: static;\", \"}\"].join(\"\");\n    var css = document.createElement(\"style\");\n    css.type = \"text/css\";\n    css.id = \"textFitStyleSheet\";\n    css.innerHTML = style;\n    document.body.appendChild(css);\n  }\n});","map":{"version":3,"sources":["/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/Client/node_modules/textfit/textFit.js"],"names":["root","factory","define","amd","exports","module","textFit","global","defaultSettings","alignVert","alignHoriz","multiLine","detectMultiLine","minFontSize","maxFontSize","reProcess","widthOnly","alignVertWithFlexbox","els","options","settings","key","hasOwnProperty","toArray","elType","Object","prototype","toString","call","i","length","processItem","el","isElement","getAttribute","setAttribute","innerSpan","originalHeight","originalHTML","originalWidth","low","mid","high","innerHTML","innerWidth","innerHeight","Error","outerHTML","indexOf","document","createElement","className","style","appendChild","querySelector","hasClass","replace","scrollHeight","parseInt","window","getComputedStyle","size","fontSize","scrollWidth","addStyleSheet","height","clientHeight","getPropertyValue","clientWidth","o","HTMLElement","nodeType","nodeName","element","cls","getElementById","join","css","type","id","body"],"mappings":"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","sourcesContent":["/**\n * textFit v2.3.1\n * Previously known as jQuery.textFit\n * 11/2014 by STRML (strml.github.com)\n * MIT License\n *\n * To use: textFit(document.getElementById('target-div'), options);\n *\n * Will make the *text* content inside a container scale to fit the container\n * The container is required to have a set width and height\n * Uses binary search to fit text with minimal layout calls.\n * Version 2.0 does not use jQuery.\n */\n/*global define:true, document:true, window:true, HTMLElement:true*/\n\n(function(root, factory) {\n  \"use strict\";\n\n  // UMD shim\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // Node/CommonJS\n    module.exports = factory();\n  } else {\n    // Browser\n    root.textFit = factory();\n  }\n\n}(typeof global === \"object\" ? global : this, function () {\n  \"use strict\";\n\n  var defaultSettings = {\n    alignVert: false, // if true, textFit will align vertically using css tables\n    alignHoriz: false, // if true, textFit will set text-align: center\n    multiLine: false, // if true, textFit will not set white-space: no-wrap\n    detectMultiLine: true, // disable to turn off automatic multi-line sensing\n    minFontSize: 6,\n    maxFontSize: 80,\n    reProcess: true, // if true, textFit will re-process already-fit nodes. Set to 'false' for better performance\n    widthOnly: false, // if true, textFit will fit text to element width, regardless of text height\n    alignVertWithFlexbox: false, // if true, textFit will use flexbox for vertical alignment\n  };\n\n  return function textFit(els, options) {\n\n    if (!options) options = {};\n\n    // Extend options.\n    var settings = {};\n    for(var key in defaultSettings){\n      if(options.hasOwnProperty(key)){\n        settings[key] = options[key];\n      } else {\n        settings[key] = defaultSettings[key];\n      }\n    }\n\n    // Convert jQuery objects into arrays\n    if (typeof els.toArray === \"function\") {\n      els = els.toArray();\n    }\n\n    // Support passing a single el\n    var elType = Object.prototype.toString.call(els);\n    if (elType !== '[object Array]' && elType !== '[object NodeList]' &&\n            elType !== '[object HTMLCollection]'){\n      els = [els];\n    }\n\n    // Process each el we've passed.\n    for(var i = 0; i < els.length; i++){\n      processItem(els[i], settings);\n    }\n  };\n\n  /**\n   * The meat. Given an el, make the text inside it fit its parent.\n   * @param  {DOMElement} el       Child el.\n   * @param  {Object} settings     Options for fit.\n   */\n  function processItem(el, settings){\n    if (!isElement(el) || (!settings.reProcess && el.getAttribute('textFitted'))) {\n      return false;\n    }\n\n    // Set textFitted attribute so we know this was processed.\n    if(!settings.reProcess){\n      el.setAttribute('textFitted', 1);\n    }\n\n    var innerSpan, originalHeight, originalHTML, originalWidth;\n    var low, mid, high;\n\n    // Get element data.\n    originalHTML = el.innerHTML;\n    originalWidth = innerWidth(el);\n    originalHeight = innerHeight(el);\n\n    // Don't process if we can't find box dimensions\n    if (!originalWidth || (!settings.widthOnly && !originalHeight)) {\n      if(!settings.widthOnly)\n        throw new Error('Set a static height and width on the target element ' + el.outerHTML +\n          ' before using textFit!');\n      else\n        throw new Error('Set a static width on the target element ' + el.outerHTML +\n          ' before using textFit!');\n    }\n\n    // Add textFitted span inside this container.\n    if (originalHTML.indexOf('textFitted') === -1) {\n      innerSpan = document.createElement('span');\n      innerSpan.className = 'textFitted';\n      // Inline block ensure it takes on the size of its contents, even if they are enclosed\n      // in other tags like <p>\n      innerSpan.style['display'] = 'inline-block';\n      innerSpan.innerHTML = originalHTML;\n      el.innerHTML = '';\n      el.appendChild(innerSpan);\n    } else {\n      // Reprocessing.\n      innerSpan = el.querySelector('span.textFitted');\n      // Remove vertical align if we're reprocessing.\n      if (hasClass(innerSpan, 'textFitAlignVert')){\n        innerSpan.className = innerSpan.className.replace('textFitAlignVert', '');\n        innerSpan.style['height'] = '';\n        el.className.replace('textFitAlignVertFlex', '');\n      }\n    }\n\n    // Prepare & set alignment\n    if (settings.alignHoriz) {\n      el.style['text-align'] = 'center';\n      innerSpan.style['text-align'] = 'center';\n    }\n\n    // Check if this string is multiple lines\n    // Not guaranteed to always work if you use wonky line-heights\n    var multiLine = settings.multiLine;\n    if (settings.detectMultiLine && !multiLine &&\n        innerSpan.scrollHeight >= parseInt(window.getComputedStyle(innerSpan)['font-size'], 10) * 2){\n      multiLine = true;\n    }\n\n    // If we're not treating this as a multiline string, don't let it wrap.\n    if (!multiLine) {\n      el.style['white-space'] = 'nowrap';\n    }\n\n    low = settings.minFontSize;\n    high = settings.maxFontSize;\n\n    // Binary search for highest best fit\n    var size = low;\n    while (low <= high) {\n      mid = (high + low) >> 1;\n      innerSpan.style.fontSize = mid + 'px';\n      if(innerSpan.scrollWidth <= originalWidth && (settings.widthOnly || innerSpan.scrollHeight <= originalHeight)){\n        size = mid;\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n      // await injection point\n    }\n    // found, updating font if differs:\n    if( innerSpan.style.fontSize != size + 'px' ) innerSpan.style.fontSize = size + 'px';\n\n    // Our height is finalized. If we are aligning vertically, set that up.\n    if (settings.alignVert) {\n      addStyleSheet();\n      var height = innerSpan.scrollHeight;\n      if (window.getComputedStyle(el)['position'] === \"static\"){\n        el.style['position'] = 'relative';\n      }\n      if (!hasClass(innerSpan, \"textFitAlignVert\")){\n        innerSpan.className = innerSpan.className + \" textFitAlignVert\";\n      }\n      innerSpan.style['height'] = height + \"px\";\n      if (settings.alignVertWithFlexbox && !hasClass(el, \"textFitAlignVertFlex\")) {\n        el.className = el.className + \" textFitAlignVertFlex\";\n      }\n    }\n  }\n\n  // Calculate height without padding.\n  function innerHeight(el){\n    var style = window.getComputedStyle(el, null);\n    return el.clientHeight -\n      parseInt(style.getPropertyValue('padding-top'), 10) -\n      parseInt(style.getPropertyValue('padding-bottom'), 10);\n  }\n\n  // Calculate width without padding.\n  function innerWidth(el){\n    var style = window.getComputedStyle(el, null);\n    return el.clientWidth -\n      parseInt(style.getPropertyValue('padding-left'), 10) -\n      parseInt(style.getPropertyValue('padding-right'), 10);\n  }\n\n  //Returns true if it is a DOM element\n  function isElement(o){\n    return (\n      typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n      o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName===\"string\"\n    );\n  }\n\n  function hasClass(element, cls) {\n    return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;\n  }\n\n  // Better than a stylesheet dependency\n  function addStyleSheet() {\n    if (document.getElementById(\"textFitStyleSheet\")) return;\n    var style = [\n      \".textFitAlignVert{\",\n        \"position: absolute;\",\n        \"top: 0; right: 0; bottom: 0; left: 0;\",\n        \"margin: auto;\",\n        \"display: flex;\",\n        \"justify-content: center;\",\n        \"flex-direction: column;\",\n      \"}\",\n      \".textFitAlignVertFlex{\",\n        \"display: flex;\",\n      \"}\",\n      \".textFitAlignVertFlex .textFitAlignVert{\",\n        \"position: static;\",\n      \"}\",].join(\"\");\n\n    var css = document.createElement(\"style\");\n    css.type = \"text/css\";\n    css.id = \"textFitStyleSheet\";\n    css.innerHTML = style;\n    document.body.appendChild(css);\n  }\n}));\n"]},"metadata":{},"sourceType":"script"}