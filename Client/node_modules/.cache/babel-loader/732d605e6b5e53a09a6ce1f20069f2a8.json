{"ast":null,"code":"var _jsxFileName = \"/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/Client/src/components/TextWrapper.js\";\nimport React from 'react';\nimport { Text, Transformer } from 'react-konva';\n\nvar TextWrapper = function TextWrapper(_ref) {\n  var item = _ref.item,\n      selectShape = _ref.selectShape,\n      selected = _ref.selected,\n      dispatch = _ref.dispatch,\n      itemIndex = _ref.itemIndex,\n      text = _ref.text;\n  //Item Properties\n  var image = item.image,\n      x = item.x,\n      y = item.y,\n      width = item.width,\n      height = item.height,\n      value = item.value;\n  var shapeRef = React.useRef();\n  var trRef = React.useRef();\n  React.useEffect(function () {\n    if (selected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [selected]);\n  return React.createElement(React.Fragment, null, React.createElement(Text, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    text: value,\n    ref: shapeRef,\n    onClick: function onClick() {\n      return selectShape(item.id);\n    },\n    onDragEnd: function onDragEnd(e) {\n      dispatch({\n        type: 'UPDATE_TEXT_POSITION',\n        payload: {\n          x: e.target.x(),\n          y: e.target.y(),\n          itemIndex: itemIndex\n        }\n      });\n    },\n    onTransformEnd: function onTransformEnd(e) {\n      var node = shapeRef.current;\n      var scaleX = node.scaleX();\n      var scaleY = node.scaleY();\n      node.scaleX(1);\n      node.scaleY(1);\n      dispatch({\n        type: 'UPDATE_IMAGE_DIMENSIONS',\n        payload: {\n          height: Math.max(node.height() * scaleY),\n          width: Math.max(5, node.width() * scaleX),\n          itemIndex: itemIndex\n        }\n      });\n    },\n    draggable: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), selected && React.createElement(Transformer, {\n    ref: trRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nexport default TextWrapper;","map":{"version":3,"sources":["/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/Client/src/components/TextWrapper.js"],"names":["React","Text","Transformer","TextWrapper","item","selectShape","selected","dispatch","itemIndex","text","image","x","y","width","height","value","shapeRef","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","id","e","type","payload","target","node","scaleX","scaleY","Math","max"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,aAAlC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAA+D;AAAA,MAA5DC,IAA4D,QAA5DA,IAA4D;AAAA,MAAtDC,WAAsD,QAAtDA,WAAsD;AAAA,MAAzCC,QAAyC,QAAzCA,QAAyC;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;AAAA,MAArBC,SAAqB,QAArBA,SAAqB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC/E;AAD+E,MAEvEC,KAFuE,GAElCN,IAFkC,CAEvEM,KAFuE;AAAA,MAEhEC,CAFgE,GAElCP,IAFkC,CAEhEO,CAFgE;AAAA,MAE7DC,CAF6D,GAElCR,IAFkC,CAE7DQ,CAF6D;AAAA,MAE1DC,KAF0D,GAElCT,IAFkC,CAE1DS,KAF0D;AAAA,MAEnDC,MAFmD,GAElCV,IAFkC,CAEnDU,MAFmD;AAAA,MAE5CC,KAF4C,GAElCX,IAFkC,CAE5CW,KAF4C;AAG/E,MAAMC,QAAQ,GAAGhB,KAAK,CAACiB,MAAN,EAAjB;AACA,MAAMC,KAAK,GAAGlB,KAAK,CAACiB,MAAN,EAAd;AAEAjB,EAAAA,KAAK,CAACmB,SAAN,CAAgB,YAAM;AAClB,QAAIb,QAAJ,EAAc;AACd;AACAY,MAAAA,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBL,QAAQ,CAACI,OAA/B;AACAF,MAAAA,KAAK,CAACE,OAAN,CAAcE,QAAd,GAAyBC,SAAzB;AACC;AACJ,GAND,EAMG,CAACjB,QAAD,CANH;AAQA,SACI,0CACI,oBAAC,IAAD;AACI,IAAA,CAAC,EAAEK,CADP;AAEI,IAAA,CAAC,EAAEC,CAFP;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,MAAM,EAAEC,MAJZ;AAKI,IAAA,IAAI,EAAEC,KALV;AAMI,IAAA,GAAG,EAAEC,QANT;AAOI,IAAA,OAAO,EAAE;AAAA,aAAMX,WAAW,CAACD,IAAI,CAACoB,EAAN,CAAjB;AAAA,KAPb;AAQI,IAAA,SAAS,EAAE,mBAACC,CAAD,EAAO;AACdlB,MAAAA,QAAQ,CAAC;AACPmB,QAAAA,IAAI,EAAE,sBADC;AAEPC,QAAAA,OAAO,EAAE;AAAEhB,UAAAA,CAAC,EAAEc,CAAC,CAACG,MAAF,CAASjB,CAAT,EAAL;AAAmBC,UAAAA,CAAC,EAAEa,CAAC,CAACG,MAAF,CAAShB,CAAT,EAAtB;AAAoCJ,UAAAA,SAAS,EAATA;AAApC;AAFF,OAAD,CAAR;AAIH,KAbL;AAcI,IAAA,cAAc,EAAE,wBAACiB,CAAD,EAAO;AACnB,UAAMI,IAAI,GAAGb,QAAQ,CAACI,OAAtB;AACA,UAAMU,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACA,UAAMC,MAAM,GAAGF,IAAI,CAACE,MAAL,EAAf;AACAF,MAAAA,IAAI,CAACC,MAAL,CAAY,CAAZ;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,CAAZ;AACAxB,MAAAA,QAAQ,CAAC;AACPmB,QAAAA,IAAI,EAAE,yBADC;AAEPC,QAAAA,OAAO,EAAE;AACPb,UAAAA,MAAM,EAAEkB,IAAI,CAACC,GAAL,CAASJ,IAAI,CAACf,MAAL,KAAgBiB,MAAzB,CADD;AAEPlB,UAAAA,KAAK,EAAEmB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,IAAI,CAAChB,KAAL,KAAeiB,MAA3B,CAFA;AAGPtB,UAAAA,SAAS,EAATA;AAHO;AAFF,OAAD,CAAR;AAQD,KA5BP;AA6BI,IAAA,SAAS,MA7Bb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAgCKF,QAAQ,IAAI,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEY,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCjB,CADJ;AAoCH,CAlDD;;AAoDA,eAAef,WAAf","sourcesContent":["import React from 'react';\nimport { Text, Transformer } from 'react-konva';\n\nconst TextWrapper = ({ item, selectShape, selected, dispatch, itemIndex,text }) => {\n    //Item Properties\n    const { image, x, y, width, height,value } = item\n    const shapeRef = React.useRef()\n    const trRef = React.useRef()\n\n    React.useEffect(() => {\n        if (selected) {\n        // we need to attach transformer manually\n        trRef.current.setNode(shapeRef.current)\n        trRef.current.getLayer().batchDraw()\n        }\n    }, [selected])\n\n    return (\n        <>\n            <Text\n                x={x}\n                y={y}\n                width={width}\n                height={height}\n                text={value}\n                ref={shapeRef}\n                onClick={() => selectShape(item.id)}\n                onDragEnd={(e) => {\n                    dispatch({\n                      type: 'UPDATE_TEXT_POSITION',\n                      payload: { x: e.target.x(), y: e.target.y(), itemIndex }\n                    })\n                }}\n                onTransformEnd={(e) => {\n                    const node = shapeRef.current\n                    const scaleX = node.scaleX()\n                    const scaleY = node.scaleY()\n                    node.scaleX(1)\n                    node.scaleY(1)\n                    dispatch({\n                      type: 'UPDATE_IMAGE_DIMENSIONS',\n                      payload: {\n                        height: Math.max(node.height() * scaleY),\n                        width: Math.max(5, node.width() * scaleX),\n                        itemIndex\n                      }\n                    })\n                  }}\n                draggable\n            />\n            {selected && <Transformer ref={trRef} />} \n        </>\n    )\n}\n\nexport default TextWrapper;"]},"metadata":{},"sourceType":"module"}