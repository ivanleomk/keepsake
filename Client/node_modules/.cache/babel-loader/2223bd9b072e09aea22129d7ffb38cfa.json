{"ast":null,"code":"import _objectSpread from \"/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/src/components/TextField.js\";\nimport React from 'react';\nimport { Text, Transformer } from 'react-konva';\nimport useImage from 'use-image';\nvar REMOVE_ITEM = 'REMOVE_ITEM';\n\nvar TextField = function TextField(_ref) {\n  var item = _ref.item,\n      shapeProps = _ref.shapeProps,\n      isSelected = _ref.isSelected,\n      onSelect = _ref.onSelect,\n      text = _ref.text,\n      onChange = _ref.onChange,\n      dispatch = _ref.dispatch,\n      selectedId = _ref.selectedId;\n  var shapeRef = React.useRef();\n  var trRef = React.useRef();\n  React.useEffect(function () {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n  return React.createElement(React.Fragment, null, React.createElement(Text, {\n    text: text,\n    ref: shapeRef,\n    onClick: onSelect,\n    draggable: true,\n    onDragEnd: function onDragEnd(e) {},\n    onDblClick: function onDblClick(e) {\n      var removeItems = function removeItems(e) {\n        if (e.key === 'Backspace' || e.key === 'Delete') {\n          dispatch({\n            type: REMOVE_ITEM,\n            payload: {\n              id: selectedId\n            }\n          });\n        }\n      };\n\n      var element = e.target;\n      var textPosition = e.target.getAbsolutePosition();\n      var parentLayer = e.target.parent;\n      var parentStage = e.target.parent.parent;\n      var stageBox = e.target.parent.parent.container().getBoundingClientRect();\n      var areaPosition = {\n        x: stageBox.left + textPosition.x,\n        y: stageBox.top + textPosition.y\n      };\n      var textarea = document.createElement('textarea');\n      document.body.appendChild(textarea);\n      textarea.value = e.target.text();\n      textarea.style.position = 'absolute';\n      textarea.style.top = areaPosition.y + 'px';\n      textarea.style.left = areaPosition.x + 'px';\n\n      if (item.width) {\n        console.log(item.width);\n        textarea.style.width = \"\".concat(item.width * 4, \"px\");\n        textarea.style.height = \"\".concat(item.width * 2, \"px\");\n      } else {\n        textarea.style.width = '100px';\n      }\n\n      console.log(textarea.style.width);\n      textarea.style.border = 'none';\n      textarea.style.padding = '5px';\n      textarea.style.margin = '0px';\n      textarea.style.overflow = 'hidden';\n      textarea.style.outline = 'none';\n      textarea.style.resize = 'none';\n      textarea.focus();\n      textarea.style.lineHeight = e.target.lineHeight();\n      textarea.style.fontFamily = e.target.fontFamily();\n      textarea.style.transformOrigin = 'left top';\n      textarea.style.textAlign = e.target.align();\n      textarea.style.color = e.target.fill();\n      setTimeout(function () {\n        window.addEventListener('click', removeTextArea);\n      });\n\n      function removeTextArea(e) {\n        if (e.target !== textarea) {\n          textarea.remove();\n        }\n      }\n\n      textarea.addEventListener('keydown', function (e) {\n        if (e.keyCode === 13 && !e.shiftKey) {\n          dispatch({\n            type: 'UPDATE_TEXT_CONTENT',\n            payload: {\n              id: selectedId,\n              content: textarea.value\n            }\n          });\n          element.textArr[0].text = textarea.value;\n          textarea.remove();\n          parentLayer.draw();\n        }\n\n        if (e.keyCode === 27) {\n          textarea.remove();\n        }\n      });\n    },\n    onTransformEnd: function onTransformEnd(e) {\n      var node = shapeRef.current;\n      var scaleX = node.scaleX();\n      var scaleY = node.scaleY();\n      onChange(_objectSpread({}, shapeProps, {\n        x: node.x(),\n        y: node.y(),\n        width: node.width() * scaleX,\n        height: node.height() * scaleY\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), isSelected && React.createElement(Transformer, {\n    ref: trRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }));\n};\n\nexport default TextField;","map":{"version":3,"sources":["/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/src/components/TextField.js"],"names":["React","Text","Transformer","useImage","REMOVE_ITEM","TextField","item","shapeProps","isSelected","onSelect","text","onChange","dispatch","selectedId","shapeRef","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","e","removeItems","key","type","payload","id","element","target","textPosition","getAbsolutePosition","parentLayer","parent","parentStage","stageBox","container","getBoundingClientRect","areaPosition","x","left","y","top","textarea","document","createElement","body","appendChild","value","style","position","width","console","log","height","border","padding","margin","overflow","outline","resize","focus","lineHeight","fontFamily","transformOrigin","textAlign","align","color","fill","setTimeout","window","addEventListener","removeTextArea","remove","keyCode","shiftKey","content","textArr","draw","node","scaleX","scaleY"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,aAAlC;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,IAAMC,WAAW,GAAG,aAApB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAsF;AAAA,MAAnFC,IAAmF,QAAnFA,IAAmF;AAAA,MAA7EC,UAA6E,QAA7EA,UAA6E;AAAA,MAAjEC,UAAiE,QAAjEA,UAAiE;AAAA,MAArDC,QAAqD,QAArDA,QAAqD;AAAA,MAA3CC,IAA2C,QAA3CA,IAA2C;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACtG,MAAMC,QAAQ,GAAGd,KAAK,CAACe,MAAN,EAAjB;AACA,MAAMC,KAAK,GAAGhB,KAAK,CAACe,MAAN,EAAd;AAIAf,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAM;AACpB,QAAIT,UAAJ,EAAgB;AACd;AACAQ,MAAAA,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBL,QAAQ,CAACI,OAA/B;AACAF,MAAAA,KAAK,CAACE,OAAN,CAAcE,QAAd,GAAyBC,SAAzB;AACD;AACF,GAND,EAMG,CAACb,UAAD,CANH;AAQA,SACE,0CACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAEE,IADR;AAEE,IAAA,GAAG,EAAEI,QAFP;AAGE,IAAA,OAAO,EAAEL,QAHX;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,SAAS,EAAE,mBAAAa,CAAC,EAAI,CAEf,CAPH;AAQE,IAAA,UAAU,EAAE,oBAAAA,CAAC,EAAI;AACf,UAAMC,WAAW,GAAG,SAAdA,WAAc,CAACD,CAAD,EAAO;AACzB,YAAIA,CAAC,CAACE,GAAF,KAAU,WAAV,IAAyBF,CAAC,CAACE,GAAF,KAAU,QAAvC,EAAiD;AAC/CZ,UAAAA,QAAQ,CAAC;AAAEa,YAAAA,IAAI,EAAErB,WAAR;AAAqBsB,YAAAA,OAAO,EAAE;AAAEC,cAAAA,EAAE,EAAEd;AAAN;AAA9B,WAAD,CAAR;AACD;AACF,OAJD;;AAMA,UAAMe,OAAO,GAAGN,CAAC,CAACO,MAAlB;AACA,UAAMC,YAAY,GAAGR,CAAC,CAACO,MAAF,CAASE,mBAAT,EAArB;AACA,UAAMC,WAAW,GAAGV,CAAC,CAACO,MAAF,CAASI,MAA7B;AACA,UAAMC,WAAW,GAAGZ,CAAC,CAACO,MAAF,CAASI,MAAT,CAAgBA,MAApC;AACA,UAAME,QAAQ,GAAGb,CAAC,CAACO,MAAF,CAASI,MAAT,CAAgBA,MAAhB,CAAuBG,SAAvB,GAAmCC,qBAAnC,EAAjB;AACA,UAAIC,YAAY,GAAG;AACjBC,QAAAA,CAAC,EAAEJ,QAAQ,CAACK,IAAT,GAAgBV,YAAY,CAACS,CADf;AAEjBE,QAAAA,CAAC,EAAEN,QAAQ,CAACO,GAAT,GAAeZ,YAAY,CAACW;AAFd,OAAnB;AAIA,UAAIE,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAf;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,QAA1B;AAEAA,MAAAA,QAAQ,CAACK,KAAT,GAAiB1B,CAAC,CAACO,MAAF,CAASnB,IAAT,EAAjB;AAEAiC,MAAAA,QAAQ,CAACM,KAAT,CAAeC,QAAf,GAA0B,UAA1B;AACAP,MAAAA,QAAQ,CAACM,KAAT,CAAeP,GAAf,GAAqBJ,YAAY,CAACG,CAAb,GAAiB,IAAtC;AACAE,MAAAA,QAAQ,CAACM,KAAT,CAAeT,IAAf,GAAsBF,YAAY,CAACC,CAAb,GAAiB,IAAvC;;AACA,UAAIjC,IAAI,CAAC6C,KAAT,EAAgB;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY/C,IAAI,CAAC6C,KAAjB;AACAR,QAAAA,QAAQ,CAACM,KAAT,CAAeE,KAAf,aAA0B7C,IAAI,CAAC6C,KAAL,GAAa,CAAvC;AACAR,QAAAA,QAAQ,CAACM,KAAT,CAAeK,MAAf,aAA2BhD,IAAI,CAAC6C,KAAL,GAAa,CAAxC;AACD,OAJD,MAIO;AACLR,QAAAA,QAAQ,CAACM,KAAT,CAAeE,KAAf,GAAuB,OAAvB;AACD;;AAEDC,MAAAA,OAAO,CAACC,GAAR,CAAYV,QAAQ,CAACM,KAAT,CAAeE,KAA3B;AAEAR,MAAAA,QAAQ,CAACM,KAAT,CAAeM,MAAf,GAAwB,MAAxB;AACAZ,MAAAA,QAAQ,CAACM,KAAT,CAAeO,OAAf,GAAyB,KAAzB;AACAb,MAAAA,QAAQ,CAACM,KAAT,CAAeQ,MAAf,GAAwB,KAAxB;AACAd,MAAAA,QAAQ,CAACM,KAAT,CAAeS,QAAf,GAA0B,QAA1B;AACAf,MAAAA,QAAQ,CAACM,KAAT,CAAeU,OAAf,GAAyB,MAAzB;AACAhB,MAAAA,QAAQ,CAACM,KAAT,CAAeW,MAAf,GAAwB,MAAxB;AACAjB,MAAAA,QAAQ,CAACkB,KAAT;AACAlB,MAAAA,QAAQ,CAACM,KAAT,CAAea,UAAf,GAA4BxC,CAAC,CAACO,MAAF,CAASiC,UAAT,EAA5B;AACAnB,MAAAA,QAAQ,CAACM,KAAT,CAAec,UAAf,GAA4BzC,CAAC,CAACO,MAAF,CAASkC,UAAT,EAA5B;AACApB,MAAAA,QAAQ,CAACM,KAAT,CAAee,eAAf,GAAiC,UAAjC;AACArB,MAAAA,QAAQ,CAACM,KAAT,CAAegB,SAAf,GAA2B3C,CAAC,CAACO,MAAF,CAASqC,KAAT,EAA3B;AACAvB,MAAAA,QAAQ,CAACM,KAAT,CAAekB,KAAf,GAAuB7C,CAAC,CAACO,MAAF,CAASuC,IAAT,EAAvB;AAEAC,MAAAA,UAAU,CAAC,YAAM;AACfC,QAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCC,cAAjC;AACD,OAFS,CAAV;;AAIA,eAASA,cAAT,CAAyBlD,CAAzB,EAA4B;AAC1B,YAAIA,CAAC,CAACO,MAAF,KAAac,QAAjB,EAA2B;AACzBA,UAAAA,QAAQ,CAAC8B,MAAT;AACD;AACF;;AAED9B,MAAAA,QAAQ,CAAC4B,gBAAT,CAA0B,SAA1B,EAAqC,UAAUjD,CAAV,EAAa;AAChD,YAAIA,CAAC,CAACoD,OAAF,KAAc,EAAd,IAAoB,CAACpD,CAAC,CAACqD,QAA3B,EAAqC;AACnC/D,UAAAA,QAAQ,CAAC;AAAEa,YAAAA,IAAI,EAAE,qBAAR;AAA+BC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,EAAE,EAAEd,UAAN;AAAkB+D,cAAAA,OAAO,EAAEjC,QAAQ,CAACK;AAApC;AAAxC,WAAD,CAAR;AAEApB,UAAAA,OAAO,CAACiD,OAAR,CAAgB,CAAhB,EAAmBnE,IAAnB,GAA0BiC,QAAQ,CAACK,KAAnC;AACAL,UAAAA,QAAQ,CAAC8B,MAAT;AACAzC,UAAAA,WAAW,CAAC8C,IAAZ;AAED;;AACD,YAAIxD,CAAC,CAACoD,OAAF,KAAc,EAAlB,EAAsB;AACpB/B,UAAAA,QAAQ,CAAC8B,MAAT;AAED;AACF,OAbD;AAcD,KA/EH;AAgFE,IAAA,cAAc,EAAE,wBAAAnD,CAAC,EAAI;AACnB,UAAMyD,IAAI,GAAGjE,QAAQ,CAACI,OAAtB;AACA,UAAM8D,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACA,UAAMC,MAAM,GAAGF,IAAI,CAACE,MAAL,EAAf;AACAtE,MAAAA,QAAQ,mBACHJ,UADG;AAENgC,QAAAA,CAAC,EAAEwC,IAAI,CAACxC,CAAL,EAFG;AAGNE,QAAAA,CAAC,EAAEsC,IAAI,CAACtC,CAAL,EAHG;AAINU,QAAAA,KAAK,EAAE4B,IAAI,CAAC5B,KAAL,KAAe6B,MAJhB;AAKN1B,QAAAA,MAAM,EAAEyB,IAAI,CAACzB,MAAL,KAAgB2B;AALlB,SAAR;AAOD,KA3FH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EA8FGzE,UAAU,IAAI,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEQ,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9FjB,CADF;AAkGD,CAhHD;;AAiHA,eAAeX,SAAf","sourcesContent":["import React from 'react'\nimport { Text, Transformer } from 'react-konva'\nimport useImage from 'use-image'\n\nconst REMOVE_ITEM = 'REMOVE_ITEM'\n\nconst TextField = ({ item, shapeProps, isSelected, onSelect, text, onChange, dispatch, selectedId }) => {\n  const shapeRef = React.useRef()\n  const trRef = React.useRef()\n\n  \n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current)\n      trRef.current.getLayer().batchDraw()\n    }\n  }, [isSelected])\n\n  return (\n    <>\n      <Text\n        text={text}\n        ref={shapeRef}\n        onClick={onSelect}\n        draggable\n        onDragEnd={e => {\n\n        }}\n        onDblClick={e => {\n          const removeItems = (e) => {\n            if (e.key === 'Backspace' || e.key === 'Delete') {\n              dispatch({ type: REMOVE_ITEM, payload: { id: selectedId } })\n            }\n          }\n          \n          const element = e.target\n          const textPosition = e.target.getAbsolutePosition()\n          const parentLayer = e.target.parent\n          const parentStage = e.target.parent.parent\n          const stageBox = e.target.parent.parent.container().getBoundingClientRect()\n          var areaPosition = {\n            x: stageBox.left + textPosition.x,\n            y: stageBox.top + textPosition.y\n          }\n          var textarea = document.createElement('textarea')\n          document.body.appendChild(textarea)\n\n          textarea.value = e.target.text()\n\n          textarea.style.position = 'absolute'\n          textarea.style.top = areaPosition.y + 'px'\n          textarea.style.left = areaPosition.x + 'px'\n          if (item.width) {\n            console.log(item.width)\n            textarea.style.width = `${item.width * 4}px`\n            textarea.style.height = `${item.width * 2}px`\n          } else {\n            textarea.style.width = '100px'\n          }\n\n          console.log(textarea.style.width)\n\n          textarea.style.border = 'none'\n          textarea.style.padding = '5px'\n          textarea.style.margin = '0px'\n          textarea.style.overflow = 'hidden'\n          textarea.style.outline = 'none'\n          textarea.style.resize = 'none'\n          textarea.focus()\n          textarea.style.lineHeight = e.target.lineHeight()\n          textarea.style.fontFamily = e.target.fontFamily()\n          textarea.style.transformOrigin = 'left top'\n          textarea.style.textAlign = e.target.align()\n          textarea.style.color = e.target.fill()\n\n          setTimeout(() => {\n            window.addEventListener('click', removeTextArea)\n          })\n\n          function removeTextArea (e) {\n            if (e.target !== textarea) {\n              textarea.remove()\n            }\n          }\n\n          textarea.addEventListener('keydown', function (e) {\n            if (e.keyCode === 13 && !e.shiftKey) {\n              dispatch({ type: 'UPDATE_TEXT_CONTENT', payload: { id: selectedId, content: textarea.value } })\n\n              element.textArr[0].text = textarea.value\n              textarea.remove()\n              parentLayer.draw()\n              \n            }\n            if (e.keyCode === 27) {\n              textarea.remove()\n              \n            }\n          })\n        }}\n        onTransformEnd={e => {\n          const node = shapeRef.current\n          const scaleX = node.scaleX()\n          const scaleY = node.scaleY()\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            width: node.width() * scaleX,\n            height: node.height() * scaleY\n          })\n        }}\n      />\n      {isSelected && <Transformer ref={trRef} />}\n    </>\n  )\n}\nexport default TextField\n"]},"metadata":{},"sourceType":"module"}