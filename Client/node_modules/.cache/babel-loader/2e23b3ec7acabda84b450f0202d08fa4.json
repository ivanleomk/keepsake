{"ast":null,"code":"import _objectSpread from \"/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/Client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { ADD_IMAGE, UPDATE_IMAGE_DIMENSIONS, UPDATE_IMAGE_POSITION } from '../actionTypes';\nexport function reducer(state, action) {\n  switch (action.type) {\n    case ADD_IMAGE:\n      {\n        var _action$payload = action.payload,\n            image = _action$payload.image,\n            id = _action$payload.id,\n            width = _action$payload.width,\n            height = _action$payload.height,\n            x = _action$payload.x,\n            y = _action$payload.y;\n        return state.concat({\n          type: 'IMAGE',\n          image: image,\n          id: id,\n          width: width,\n          height: height,\n          x: x,\n          y: y\n        });\n      }\n\n    case UPDATE_IMAGE_POSITION:\n      {\n        var _action$payload2 = action.payload,\n            _x = _action$payload2.x,\n            _y = _action$payload2.y,\n            itemIndex = _action$payload2.itemIndex;\n        console.log(\"item index is \".concat(itemIndex));\n        return state.map(function (item, mapIndex) {\n          return itemIndex === mapIndex ? _objectSpread({}, item, {\n            x: _x,\n            y: _y\n          }) : _objectSpread({}, item);\n        });\n      }\n\n    case UPDATE_IMAGE_DIMENSIONS:\n      {\n        var _action$payload3 = action.payload,\n            _height = _action$payload3.height,\n            _width = _action$payload3.width,\n            _itemIndex = _action$payload3.itemIndex;\n        console.log(\"item index is \".concat(_itemIndex));\n        console.log(_height, _width);\n        return state.map(function (item, mapIndex) {\n          return _itemIndex === mapIndex ? _objectSpread({}, item, {\n            height: _height,\n            width: _width\n          }) : _objectSpread({}, item);\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/Client/src/reducers/letterReducer.js"],"names":["ADD_IMAGE","UPDATE_IMAGE_DIMENSIONS","UPDATE_IMAGE_POSITION","reducer","state","action","type","payload","image","id","width","height","x","y","concat","itemIndex","console","log","map","item","mapIndex"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,uBAApB,EAA6CC,qBAA7C,QAA0E,gBAA1E;AAEA,OAAO,SAASC,OAAT,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,SAAL;AAAgB;AAAA,8BAC6BK,MAAM,CAACE,OADpC;AAAA,YACNC,KADM,mBACNA,KADM;AAAA,YACCC,EADD,mBACCA,EADD;AAAA,YACKC,KADL,mBACKA,KADL;AAAA,YACYC,MADZ,mBACYA,MADZ;AAAA,YACoBC,CADpB,mBACoBA,CADpB;AAAA,YACuBC,CADvB,mBACuBA,CADvB;AAEd,eAAOT,KAAK,CAACU,MAAN,CAAa;AAAER,UAAAA,IAAI,EAAE,OAAR;AAAiBE,UAAAA,KAAK,EAALA,KAAjB;AAAwBC,UAAAA,EAAE,EAAFA,EAAxB;AAA4BC,UAAAA,KAAK,EAALA,KAA5B;AAAmCC,UAAAA,MAAM,EAANA,MAAnC;AAA2CC,UAAAA,CAAC,EAADA,CAA3C;AAA8CC,UAAAA,CAAC,EAADA;AAA9C,SAAb,CAAP;AACD;;AAED,SAAKX,qBAAL;AAA4B;AAAA,+BACEG,MAAM,CAACE,OADT;AAAA,YAClBK,EADkB,oBAClBA,CADkB;AAAA,YACfC,EADe,oBACfA,CADe;AAAA,YACZE,SADY,oBACZA,SADY;AAE1BC,QAAAA,OAAO,CAACC,GAAR,yBAA6BF,SAA7B;AACA,eAAOX,KAAK,CAACc,GAAN,CAAU,UAACC,IAAD,EAAOC,QAAP;AAAA,iBACfL,SAAS,KAAKK,QAAd,qBAA8BD,IAA9B;AAAoCP,YAAAA,CAAC,EAADA,EAApC;AAAuCC,YAAAA,CAAC,EAADA;AAAvC,iCAAkDM,IAAlD,CADe;AAAA,SAAV,CAAP;AAGD;;AAED,SAAKlB,uBAAL;AAA8B;AAAA,+BACSI,MAAM,CAACE,OADhB;AAAA,YACpBI,OADoB,oBACpBA,MADoB;AAAA,YACZD,MADY,oBACZA,KADY;AAAA,YACLK,UADK,oBACLA,SADK;AAE5BC,QAAAA,OAAO,CAACC,GAAR,yBAA6BF,UAA7B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ,EAAoBD,MAApB;AACA,eAAON,KAAK,CAACc,GAAN,CAAU,UAACC,IAAD,EAAOC,QAAP;AAAA,iBACfL,UAAS,KAAKK,QAAd,qBAA8BD,IAA9B;AAAoCR,YAAAA,MAAM,EAANA,OAApC;AAA4CD,YAAAA,KAAK,EAALA;AAA5C,iCAA2DS,IAA3D,CADe;AAAA,SAAV,CAAP;AAGD;;AAED;AACE,aAAOf,KAAP;AAxBJ;AA0BD","sourcesContent":["import { ADD_IMAGE, UPDATE_IMAGE_DIMENSIONS, UPDATE_IMAGE_POSITION } from '../actionTypes'\n\nexport function reducer (state, action) {\n  switch (action.type) {\n    case ADD_IMAGE: {\n      const { image, id, width, height, x, y } = action.payload\n      return state.concat({ type: 'IMAGE', image, id, width, height, x, y })\n    }\n\n    case UPDATE_IMAGE_POSITION: {\n      const { x, y, itemIndex } = action.payload\n      console.log(`item index is ${itemIndex}`)\n      return state.map((item, mapIndex) =>\n        itemIndex === mapIndex ? { ...item, x, y } : { ...item }\n      )\n    }\n\n    case UPDATE_IMAGE_DIMENSIONS: {\n      const { height, width, itemIndex } = action.payload\n      console.log(`item index is ${itemIndex}`)\n      console.log(height, width)\n      return state.map((item, mapIndex) =>\n        itemIndex === mapIndex ? { ...item, height, width } : { ...item }\n      )\n    }\n\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}