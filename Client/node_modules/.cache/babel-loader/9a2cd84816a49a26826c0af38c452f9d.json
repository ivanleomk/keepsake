{"ast":null,"code":"import _objectSpread from \"/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/Client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/Client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/Client/src/components/Img.js\";\nimport React from 'react';\nimport { Image, Transformer } from 'react-konva';\nimport useImage from 'use-image';\n\nvar Img = function Img(_ref) {\n  var dispatch = _ref.dispatch,\n      id = _ref.id,\n      item = _ref.item,\n      shapeProps = _ref.shapeProps,\n      selectedId = _ref.selectedId,\n      onSelect = _ref.onSelect,\n      onChange = _ref.onChange,\n      imageUrl = _ref.imageUrl,\n      height = _ref.height,\n      width = _ref.width,\n      x = _ref.x,\n      y = _ref.y;\n  var shapeRef = React.useRef();\n  var trRef = React.useRef();\n\n  var _useImage = useImage(imageUrl),\n      _useImage2 = _slicedToArray(_useImage, 1),\n      image = _useImage2[0];\n\n  React.useEffect(function () {\n    if (selectedId === id) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    } else {}\n  }, [selectedId]);\n  return React.createElement(React.Fragment, null, React.createElement(Image, {\n    onClick: onSelect,\n    image: image,\n    ref: shapeRef,\n    x: x,\n    y: x,\n    draggable: true,\n    onDragStart: function onDragStart(e) {\n      return console.log(e.target.x(), e.target.y());\n    },\n    onDragMove: onChange(_objectSpread({}, shapeProps, {\n      height: e.target.height(),\n      width: e.target.width(),\n      x: e.target.y(),\n      y: e.target.x()\n    })),\n    onTransformEnd: function onTransformEnd(e) {\n      var node = shapeRef.current;\n      var scaleX = node.scaleX();\n      var scaleY = node.scaleY();\n      onChange(_objectSpread({}, shapeProps, {\n        x: node.x(),\n        y: node.y(),\n        width: node.width() * scaleX,\n        height: node.height() * scaleY\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), selectedId === id && React.createElement(Transformer, {\n    ref: trRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }));\n};\n\nexport default Img;","map":{"version":3,"sources":["/Users/ivanleo/Documents/coding/Client/keepsake/tailwindKeepsake/Client/src/components/Img.js"],"names":["React","Image","Transformer","useImage","Img","dispatch","id","item","shapeProps","selectedId","onSelect","onChange","imageUrl","height","width","x","y","shapeRef","useRef","trRef","image","useEffect","current","setNode","getLayer","batchDraw","e","console","log","target","node","scaleX","scaleY"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Image, Transformer } from 'react-konva'\nimport useImage from 'use-image'\nconst Img = ({ dispatch, id, item, shapeProps, selectedId, onSelect, onChange, imageUrl, height,width,x,y }) => {\n  const shapeRef = React.useRef()\n  const trRef = React.useRef()\n  const [image] = useImage(imageUrl)\n  \n  React.useEffect(() => {\n    \n    if (selectedId===id) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current)\n      trRef.current.getLayer().batchDraw()\n    }\n    else {\n      \n    }\n    \n    \n  }, [selectedId])\n  return (\n    <>\n      <Image\n        onClick={onSelect}\n        image={image}\n        ref={shapeRef}\n        x={x}\n        y={x}\n        draggable\n        onDragStart={\n          e => console.log(e.target.x(), e.target.y())\n        }\n        onDragMove={\n          onChange({\n            ...shapeProps,\n            height: e.target.height(),\n            width: e.target.width(),\n            x: e.target.y(),\n            y: e.target.x()\n          })\n        \n        }\n        \n        onTransformEnd={e => {\n          const node = shapeRef.current\n          const scaleX = node.scaleX()\n          const scaleY = node.scaleY()\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            width: node.width() * scaleX,\n            height: node.height() * scaleY\n          })\n        }}\n      />\n      {selectedId===id && <Transformer ref={trRef} />}\n    </>\n  )\n}\nexport default Img\n"]},"metadata":{},"sourceType":"module"}